package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"music-app/handlers"
	"music-app/models"
	"net/http"
	"os"
	"strings"

	_ "music-app/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gorilla/mux"
	httpSwagger "github.com/swaggo/http-swagger"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// @title Music API
// @version 1.0
// @description This is a sample serice for music app
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email soberkoder@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /

func main() {
	router := mux.NewRouter()
	dbClient := GetMongoClient()
	ctx := handlers.New(dbClient)

	router.HandleFunc("/api/v1/metadata", ctx.CreateMusicData).Methods("POST")
	router.HandleFunc("/api/v1/track/{isrc}", ctx.FetchMusicByIsrc).Methods("GET")
	router.HandleFunc("/api/v1/artist/track", ctx.FetchMusicByArtist).Methods("GET")

	router.Use(loggingMiddleware)
	router.Use(authMiddleware)
	// Swagger
	router.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)
	startServer(router)
}

func startServer(router *mux.Router) {
	port := os.Getenv("APP_SERVER_PORT")
	validateEnv()
	err := http.ListenAndServe(":"+port, router)
	if err != nil {
		log.Println("Error while starting server", err)
		return
	}
	log.Printf("Server started and listening on port :" + port)
}

func GetMongoClient() *mongo.Client {
	serverAPI := options.ServerAPI(options.ServerAPIVersion1)
	username := os.Getenv("APP_MONGO_DB_USERNAME")
	if username == "" {
		log.Fatal("APP_MONGO_DB_USERNAME not set")
	}
	pwd := os.Getenv("APP_MONGO_DB_PASSWORD")
	if pwd == "" {
		log.Fatal("APP_MONGO_DB_PASSWORD not set")
	}
	opts := options.Client().ApplyURI("mongodb+srv://" + username + ":" + pwd + "@cluster.xhlj8qj.mongodb.net/?retryWrites=true&w=majority").SetServerAPIOptions(serverAPI)
	// Create a new client and connect to the server
	client, err := mongo.Connect(context.TODO(), opts)
	if err != nil {
		panic(err)
	}
	/*	defer func() {
		if err = client.Disconnect(context.TODO()); err != nil {
			panic(err)
		}
	}() */
	// Send a ping to confirm a successful connection
	if err := client.Database("admin").RunCommand(context.TODO(), bson.D{{"ping", 1}}).Err(); err != nil {
		panic(err)
	}
	fmt.Println("Pinged your deployment. You successfully connected to MongoDB!")
	return client
}

func loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log.Println(r.Method, r.URL.Path)
		next.ServeHTTP(w, r)
	})
}

func authMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Check if user is authenticated
		if !isAuthenticated(r) {
			error := models.ErrorDetails{Code: "UNAUTHORIZED", Desc: "User is not authorized"}
			resBytes, err := json.Marshal(error)
			if err != nil {
				log.Println("Error while marshalling response", err)
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusUnauthorized)
			w.Write([]byte(resBytes))
			return
		}
		// Call the next middleware function or final handler
		next.ServeHTTP(w, r)
	})
}

func isAuthenticated(r *http.Request) bool {
	if strings.Contains(r.URL.Path, "/swagger/") {
		return true
	}
	uname, pwd, ok := r.BasicAuth()
	if !ok {
		return false
	}

	username := os.Getenv("APP_MUSIC_API_AUTH_USERNAME")
	if username == "" {
		log.Fatal("APP_MUSIC_API_AUTH_USERNAME not set")
	}
	password := os.Getenv("APP_MUSIC_API_AUTH_PASSWORD")
	if password == "" {
		log.Fatal("APP_MUSIC_API_AUTH_PASSWORD not set")
	}
	if uname != username {
		return false
	}
	if pwd != password {
		return false
	}
	return true
}

func validateEnv() {
	username := os.Getenv("APP_MUSIC_API_AUTH_USERNAME")
	if username == "" {
		log.Fatal("APP_MUSIC_API_AUTH_USERNAME not set")
	}
	password := os.Getenv("APP_MUSIC_API_AUTH_PASSWORD")
	if password == "" {
		log.Fatal("APP_MUSIC_API_AUTH_PASSWORD not set")
	}
}
